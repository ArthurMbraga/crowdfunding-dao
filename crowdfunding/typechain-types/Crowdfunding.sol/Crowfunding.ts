/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CrowfundingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "campaigns"
      | "createCampaign"
      | "donateToCampaign"
      | "getCampaigns"
      | "getDonators"
      | "isFundEnabled"
      | "isFundSucccess"
      | "numberOfCampaigns"
      | "withdrawFunder"
      | "withdrawOwner"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Funded" | "FunderWithdraw" | "OwnerWithdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "campaigns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donateToCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaigns",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDonators",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isFundEnabled",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isFundSucccess",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfCampaigns",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawOwner",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "campaigns", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donateToCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDonators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFundEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFundSucccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawOwner",
    data: BytesLike
  ): Result;
}

export namespace FundedEvent {
  export type InputTuple = [
    _id: BigNumberish,
    _funder: AddressLike,
    _amount: BigNumberish
  ];
  export type OutputTuple = [_id: bigint, _funder: string, _amount: bigint];
  export interface OutputObject {
    _id: bigint;
    _funder: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FunderWithdrawEvent {
  export type InputTuple = [
    _id: BigNumberish,
    _funder: AddressLike,
    _amount: BigNumberish
  ];
  export type OutputTuple = [_id: bigint, _funder: string, _amount: bigint];
  export interface OutputObject {
    _id: bigint;
    _funder: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerWithdrawEvent {
  export type InputTuple = [_id: BigNumberish, _amount: BigNumberish];
  export type OutputTuple = [_id: bigint, _amount: bigint];
  export interface OutputObject {
    _id: bigint;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Crowfunding extends BaseContract {
  connect(runner?: ContractRunner | null): Crowfunding;
  waitForDeployment(): Promise<this>;

  interface: CrowfundingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  campaigns: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, string, string, boolean] & {
        amountCollected: bigint;
        deadline: bigint;
        targetFounds: bigint;
        title: string;
        owner: string;
        fundsWithdrawn: boolean;
      }
    ],
    "view"
  >;

  createCampaign: TypedContractMethod<
    [_title: string, _targetFunds: BigNumberish, _deadline: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  donateToCampaign: TypedContractMethod<[_id: BigNumberish], [void], "payable">;

  getCampaigns: TypedContractMethod<[], [[bigint[], string[]]], "view">;

  getDonators: TypedContractMethod<[_id: BigNumberish], [bigint[]], "view">;

  isFundEnabled: TypedContractMethod<[_id: BigNumberish], [boolean], "view">;

  isFundSucccess: TypedContractMethod<[_id: BigNumberish], [boolean], "view">;

  numberOfCampaigns: TypedContractMethod<[], [bigint], "view">;

  withdrawFunder: TypedContractMethod<
    [_id: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawOwner: TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "campaigns"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, string, string, boolean] & {
        amountCollected: bigint;
        deadline: bigint;
        targetFounds: bigint;
        title: string;
        owner: string;
        fundsWithdrawn: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createCampaign"
  ): TypedContractMethod<
    [_title: string, _targetFunds: BigNumberish, _deadline: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "donateToCampaign"
  ): TypedContractMethod<[_id: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "getCampaigns"
  ): TypedContractMethod<[], [[bigint[], string[]]], "view">;
  getFunction(
    nameOrSignature: "getDonators"
  ): TypedContractMethod<[_id: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "isFundEnabled"
  ): TypedContractMethod<[_id: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isFundSucccess"
  ): TypedContractMethod<[_id: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "numberOfCampaigns"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawFunder"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawOwner"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "Funded"
  ): TypedContractEvent<
    FundedEvent.InputTuple,
    FundedEvent.OutputTuple,
    FundedEvent.OutputObject
  >;
  getEvent(
    key: "FunderWithdraw"
  ): TypedContractEvent<
    FunderWithdrawEvent.InputTuple,
    FunderWithdrawEvent.OutputTuple,
    FunderWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "OwnerWithdraw"
  ): TypedContractEvent<
    OwnerWithdrawEvent.InputTuple,
    OwnerWithdrawEvent.OutputTuple,
    OwnerWithdrawEvent.OutputObject
  >;

  filters: {
    "Funded(uint256,address,uint256)": TypedContractEvent<
      FundedEvent.InputTuple,
      FundedEvent.OutputTuple,
      FundedEvent.OutputObject
    >;
    Funded: TypedContractEvent<
      FundedEvent.InputTuple,
      FundedEvent.OutputTuple,
      FundedEvent.OutputObject
    >;

    "FunderWithdraw(uint256,address,uint256)": TypedContractEvent<
      FunderWithdrawEvent.InputTuple,
      FunderWithdrawEvent.OutputTuple,
      FunderWithdrawEvent.OutputObject
    >;
    FunderWithdraw: TypedContractEvent<
      FunderWithdrawEvent.InputTuple,
      FunderWithdrawEvent.OutputTuple,
      FunderWithdrawEvent.OutputObject
    >;

    "OwnerWithdraw(uint256,uint256)": TypedContractEvent<
      OwnerWithdrawEvent.InputTuple,
      OwnerWithdrawEvent.OutputTuple,
      OwnerWithdrawEvent.OutputObject
    >;
    OwnerWithdraw: TypedContractEvent<
      OwnerWithdrawEvent.InputTuple,
      OwnerWithdrawEvent.OutputTuple,
      OwnerWithdrawEvent.OutputObject
    >;
  };
}
